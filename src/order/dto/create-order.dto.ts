import { ApiProperty } from '@nestjs/swagger';
import {
  IsUUID,
  IsNotEmpty,
  IsString,
  IsNumber,
  IsEnum,
  IsOptional,
  Min,
  ValidateNested,
  IsArray,
  ArrayMinSize,
} from 'class-validator';
import { Type } from 'class-transformer';
import { OrderStatus } from '../enums/order-status.enum';
import { AddressDto } from './address.dto';
import { CreateOrderItemDto } from './create-order-item.dto';

export class CreateOrderDto {
  @ApiProperty({
    description: 'User ID who placed the order',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @IsNotEmpty({ message: 'User ID is required' })
  @IsUUID('4', { message: 'User ID must be a valid UUID' })
  userId: string;

  @ApiProperty({
    description: 'Order number for easy reference',
    example: 'ORD-2023-12345',
  })
  @IsOptional() // This can be auto-generated by the service
  @IsString()
  orderNumber?: string;

  @ApiProperty({
    description: 'Items in the order',
    type: [CreateOrderItemDto],
  })
  @IsNotEmpty({ message: 'Order must have at least one item' })
  @IsArray()
  @ArrayMinSize(1, { message: 'Order must have at least one item' })
  @ValidateNested({ each: true })
  @Type(() => CreateOrderItemDto)
  items: CreateOrderItemDto[];

  @ApiProperty({
    description: 'Subtotal amount before tax and discount',
    example: 99.98,
  })
  @IsNotEmpty({ message: 'Subtotal is required' })
  @IsNumber({}, { message: 'Subtotal must be a number' })
  @Min(0, { message: 'Subtotal cannot be negative' })
  subtotal: number;

  @ApiProperty({
    description: 'Discount amount applied to the order',
    example: 10.00,
    required: false,
    default: 0,
  })
  @IsOptional()
  @IsNumber({}, { message: 'Discount must be a number' })
  @Min(0, { message: 'Discount cannot be negative' })
  discount?: number;

  @ApiProperty({
    description: 'Tax amount applied to the order',
    example: 8.00,
    required: false,
    default: 0,
  })
  @IsOptional()
  @IsNumber({}, { message: 'Tax must be a number' })
  @Min(0, { message: 'Tax cannot be negative' })
  tax?: number;

  @ApiProperty({
    description: 'Total amount after tax and discount',
    example: 97.98,
  })
  @IsNotEmpty({ message: 'Total is required' })
  @IsNumber({}, { message: 'Total must be a number' })
  @Min(0, { message: 'Total cannot be negative' })
  total: number;

  @ApiProperty({
    description: 'Current status of the order',
    enum: OrderStatus,
    default: OrderStatus.PENDING,
    required: false,
  })
  @IsOptional()
  @IsEnum(OrderStatus, { message: 'Status must be a valid OrderStatus enum value' })
  status?: OrderStatus;

  @ApiProperty({
    description: 'Shipping address details',
    type: AddressDto,
  })
  @IsNotEmpty({ message: 'Shipping address is required' })
  @ValidateNested()
  @Type(() => AddressDto)
  shippingAddress: AddressDto;

  @ApiProperty({
    description: 'Billing address details',
    type: AddressDto,
  })
  @IsNotEmpty({ message: 'Billing address is required' })
  @ValidateNested()
  @Type(() => AddressDto)
  billingAddress: AddressDto;

  @ApiProperty({
    description: 'Payment method used',
    example: 'Credit Card',
  })
  @IsNotEmpty({ message: 'Payment method is required' })
  @IsString()
  paymentMethod: string;

  @ApiProperty({
    description: 'Delivery method chosen',
    example: 'Standard Shipping',
  })
  @IsNotEmpty({ message: 'Delivery method is required' })
  @IsString()
  deliveryMethod: string;

  @ApiProperty({
    description: 'Tracking number for the shipment',
    example: 'TRK123456789',
    required: false,
  })
  @IsOptional()
  @IsString()
  trackingNumber?: string;

  @ApiProperty({
    description: 'Additional notes for the order',
    example: 'Please leave at the front door',
    required: false,
  })
  @IsOptional()
  @IsString()
  notes?: string;
}
